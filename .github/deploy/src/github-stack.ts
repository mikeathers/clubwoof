import {Duration, Stack, StackProps} from "aws-cdk-lib";import {Construct} from "constructs";import {Conditions, ManagedPolicy, OpenIdConnectProvider, Role, WebIdentityPrincipal} from "aws-cdk-lib/aws-iam";export interface GitHubStackProps extends StackProps {  readonly repositoryConfig: { owner: string; repo: string; filter?: string }[];}export class GithubStack extends Stack {  constructor(scope: Construct, id: string, props?: GitHubStackProps) {    super(scope, id, props)    const githubDomain = 'token.actions.githubusercontent.com';    const ghProvider = new OpenIdConnectProvider(this, 'githubProvider', {      url: `https://${githubDomain}`,      clientIds: ['sts.amazonaws.com'],    });    const iamRepoDeployAccess = props?.repositoryConfig.map(      (r) => `repo:${r.owner}/${r.repo}:${r.filter ?? '*'}`    );    const conditions: Conditions = {      StringLike: {        [`${githubDomain}:sub`]: iamRepoDeployAccess,      },    };    new Role(this, 'exampleGitHubDeployRole', {      assumedBy: new WebIdentityPrincipal(        ghProvider.openIdConnectProviderArn,        conditions      ),      managedPolicies: [        ManagedPolicy.fromAwsManagedPolicyName('AdministratorAccess'),      ],      roleName: 'exampleGitHubDeployRole',      description:        'This role is used via GitHub Actions to deploy with AWS CDK or Terraform on the target AWS account',      maxSessionDuration: Duration.hours(1),    });  }}