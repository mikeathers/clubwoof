'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
exports.handleAccessIdentity =
  exports.getStackName =
  exports.getGithubRepositoryName =
  exports.getUrl =
  exports.getBranchedSubDomainName =
  exports.isMasterBranch =
    void 0
const aws_cloudfront_1 = require('aws-cdk-lib/aws-cloudfront')
const aws_iam_1 = require('aws-cdk-lib/aws-iam')
const config_1 = require('../../../config')
const isMasterBranch = (branchName) => {
  return branchName === 'main'
}
exports.isMasterBranch = isMasterBranch
const getBranchedSubDomainName = (props) => {
  const { subDomainName, branchName } = props
  return (0, exports.isMasterBranch)(branchName) ? subDomainName : `${subDomainName}-${branchName}`
}
exports.getBranchedSubDomainName = getBranchedSubDomainName
const getUrl = (props) => {
  const { domainName, branchedSubDomainName } = props
  return `${branchedSubDomainName}.${domainName}`
}
exports.getUrl = getUrl
const getGithubRepositoryName = (githubRepository) => {
  /*
      The GITHUB_REPOSITORY env var provided by GitHub Actions includes the owner
      of the repository and the repository name.
  
      We only want the repository name.
  
      E.g. tylangesmith-organisation/nextjs-serverless-static-site
            ==> nextjs-serverless-static-site
    */
  return githubRepository.split('/')[1]
}
exports.getGithubRepositoryName = getGithubRepositoryName
const getStackName = (props) => {
  const { githubRepository, branchName } = props
  const githubRepositoryName = (0, exports.getGithubRepositoryName)(githubRepository)
  return `${githubRepositoryName}-${branchName}`
}
exports.getStackName = getStackName
const handleAccessIdentity = (scope, bucket) => {
  const cloudfrontOriginAccessIdentity = new aws_cloudfront_1.OriginAccessIdentity(
    scope,
    `${config_1.default.STACK_PREFIX}-cloud-front-origin-access-identity`,
  )
  bucket.grantRead(cloudfrontOriginAccessIdentity)
  bucket.addToResourcePolicy(
    new aws_iam_1.PolicyStatement({
      actions: ['s3:GetObject'],
      resources: [bucket.arnForObjects('*')],
      principals: [
        new aws_iam_1.CanonicalUserPrincipal(
          cloudfrontOriginAccessIdentity.cloudFrontOriginAccessIdentityS3CanonicalUserId,
        ),
      ],
    }),
  )
  return cloudfrontOriginAccessIdentity
}
exports.handleAccessIdentity = handleAccessIdentity
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrREFBZ0U7QUFDaEUsaURBQTRFO0FBRzVFLDRDQUFxQztBQUU5QixNQUFNLGNBQWMsR0FBRyxDQUFDLFVBQWtCLEVBQVcsRUFBRTtJQUM1RCxPQUFPLFVBQVUsS0FBSyxNQUFNLENBQUE7QUFDOUIsQ0FBQyxDQUFBO0FBRlksUUFBQSxjQUFjLGtCQUUxQjtBQVlNLE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxLQUE0QixFQUFVLEVBQUU7SUFDL0UsTUFBTSxFQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUMsR0FBRyxLQUFLLENBQUE7SUFDekMsT0FBTyxJQUFBLHNCQUFjLEVBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxhQUFhLElBQUksVUFBVSxFQUFFLENBQUE7QUFDdEYsQ0FBQyxDQUFBO0FBSFksUUFBQSx3QkFBd0IsNEJBR3BDO0FBRU0sTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFrQixFQUFVLEVBQUU7SUFDbkQsTUFBTSxFQUFDLFVBQVUsRUFBRSxxQkFBcUIsRUFBQyxHQUFHLEtBQUssQ0FBQTtJQUNqRCxPQUFPLEdBQUcscUJBQXFCLElBQUksVUFBVSxFQUFFLENBQUE7QUFDakQsQ0FBQyxDQUFBO0FBSFksUUFBQSxNQUFNLFVBR2xCO0FBRU0sTUFBTSx1QkFBdUIsR0FBRyxDQUFDLGdCQUF3QixFQUFVLEVBQUU7SUFDMUU7Ozs7Ozs7O01BUUU7SUFDRixPQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2QyxDQUFDLENBQUE7QUFYWSxRQUFBLHVCQUF1QiwyQkFXbkM7QUFPTSxNQUFNLFlBQVksR0FBRyxDQUFDLEtBQXdCLEVBQVUsRUFBRTtJQUMvRCxNQUFNLEVBQUMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFDLEdBQUcsS0FBSyxDQUFBO0lBQzVDLE1BQU0sb0JBQW9CLEdBQUcsSUFBQSwrQkFBdUIsRUFBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQ3RFLE9BQU8sR0FBRyxvQkFBb0IsSUFBSSxVQUFVLEVBQUUsQ0FBQTtBQUNoRCxDQUFDLENBQUE7QUFKWSxRQUFBLFlBQVksZ0JBSXhCO0FBRU0sTUFBTSxvQkFBb0IsR0FBRyxDQUFDLEtBQWdCLEVBQUUsTUFBZSxFQUFFLEVBQUU7SUFDeEUsTUFBTSw4QkFBOEIsR0FBRyxJQUFJLHFDQUFvQixDQUFDLEtBQUssRUFBRSxHQUFHLGdCQUFNLENBQUMsWUFBWSxxQ0FBcUMsQ0FBQyxDQUFDO0lBRXBJLE1BQU0sQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUVqRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSx5QkFBZSxDQUFDO1FBQzdDLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztRQUN6QixTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLFVBQVUsRUFBRSxDQUFDLElBQUksZ0NBQXNCLENBQUMsOEJBQThCLENBQUMsK0NBQStDLENBQUMsQ0FBQztLQUN6SCxDQUFDLENBQUMsQ0FBQztJQUVKLE9BQU8sOEJBQThCLENBQUE7QUFDdkMsQ0FBQyxDQUFBO0FBWlksUUFBQSxvQkFBb0Isd0JBWWhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPcmlnaW5BY2Nlc3NJZGVudGl0eX0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZGZyb250XCI7XHJpbXBvcnQge0Nhbm9uaWNhbFVzZXJQcmluY2lwYWwsIFBvbGljeVN0YXRlbWVudH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtccmltcG9ydCB7SUJ1Y2tldH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1zM1wiO1xyaW1wb3J0IHtDb25zdHJ1Y3R9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XHJpbXBvcnQgQ09ORklHIGZyb20gXCIuLi8uLi8uLi9jb25maWdcIjtcclxyZXhwb3J0IGNvbnN0IGlzTWFzdGVyQnJhbmNoID0gKGJyYW5jaE5hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyICByZXR1cm4gYnJhbmNoTmFtZSA9PT0gJ21haW4nXHJ9XHJccmV4cG9ydCBpbnRlcmZhY2UgR2V0U3ViRG9tYWluTmFtZVByb3BzIHtcciAgc3ViRG9tYWluTmFtZTogc3RyaW5nO1xyICBicmFuY2hOYW1lOiBzdHJpbmc7XHJ9XHJccmV4cG9ydCBpbnRlcmZhY2UgR2V0VXJsUHJvcHMge1xyICBkb21haW5OYW1lOiBzdHJpbmc7XHIgIGJyYW5jaGVkU3ViRG9tYWluTmFtZTogc3RyaW5nO1xyfVxyXHJleHBvcnQgY29uc3QgZ2V0QnJhbmNoZWRTdWJEb21haW5OYW1lID0gKHByb3BzOiBHZXRTdWJEb21haW5OYW1lUHJvcHMpOiBzdHJpbmcgPT4ge1xyICBjb25zdCB7c3ViRG9tYWluTmFtZSwgYnJhbmNoTmFtZX0gPSBwcm9wc1xyICByZXR1cm4gaXNNYXN0ZXJCcmFuY2goYnJhbmNoTmFtZSkgPyBzdWJEb21haW5OYW1lIDogYCR7c3ViRG9tYWluTmFtZX0tJHticmFuY2hOYW1lfWBccn1cclxyZXhwb3J0IGNvbnN0IGdldFVybCA9IChwcm9wczogR2V0VXJsUHJvcHMpOiBzdHJpbmcgPT4ge1xyICBjb25zdCB7ZG9tYWluTmFtZSwgYnJhbmNoZWRTdWJEb21haW5OYW1lfSA9IHByb3BzXHIgIHJldHVybiBgJHticmFuY2hlZFN1YkRvbWFpbk5hbWV9LiR7ZG9tYWluTmFtZX1gXHJ9XHJccmV4cG9ydCBjb25zdCBnZXRHaXRodWJSZXBvc2l0b3J5TmFtZSA9IChnaXRodWJSZXBvc2l0b3J5OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xyICAvKlxyICAgIFRoZSBHSVRIVUJfUkVQT1NJVE9SWSBlbnYgdmFyIHByb3ZpZGVkIGJ5IEdpdEh1YiBBY3Rpb25zIGluY2x1ZGVzIHRoZSBvd25lclxyICAgIG9mIHRoZSByZXBvc2l0b3J5IGFuZCB0aGUgcmVwb3NpdG9yeSBuYW1lLlxyXHIgICAgV2Ugb25seSB3YW50IHRoZSByZXBvc2l0b3J5IG5hbWUuXHJcciAgICBFLmcuIHR5bGFuZ2VzbWl0aC1vcmdhbmlzYXRpb24vbmV4dGpzLXNlcnZlcmxlc3Mtc3RhdGljLXNpdGVcciAgICAgICAgICA9PT4gbmV4dGpzLXNlcnZlcmxlc3Mtc3RhdGljLXNpdGVcciAgKi9cciAgcmV0dXJuIGdpdGh1YlJlcG9zaXRvcnkuc3BsaXQoJy8nKVsxXVxyfVxyXHJleHBvcnQgaW50ZXJmYWNlIEdldFN0YWNrTmFtZVByb3BzIHtcciAgZ2l0aHViUmVwb3NpdG9yeTogc3RyaW5nO1xyICBicmFuY2hOYW1lOiBzdHJpbmc7XHJ9XHJccmV4cG9ydCBjb25zdCBnZXRTdGFja05hbWUgPSAocHJvcHM6IEdldFN0YWNrTmFtZVByb3BzKTogc3RyaW5nID0+IHtcciAgY29uc3Qge2dpdGh1YlJlcG9zaXRvcnksIGJyYW5jaE5hbWV9ID0gcHJvcHNcciAgY29uc3QgZ2l0aHViUmVwb3NpdG9yeU5hbWUgPSBnZXRHaXRodWJSZXBvc2l0b3J5TmFtZShnaXRodWJSZXBvc2l0b3J5KVxyICByZXR1cm4gYCR7Z2l0aHViUmVwb3NpdG9yeU5hbWV9LSR7YnJhbmNoTmFtZX1gXHJ9XHJccmV4cG9ydCBjb25zdCBoYW5kbGVBY2Nlc3NJZGVudGl0eSA9IChzY29wZTogQ29uc3RydWN0LCBidWNrZXQ6IElCdWNrZXQpID0+IHtcciAgY29uc3QgY2xvdWRmcm9udE9yaWdpbkFjY2Vzc0lkZW50aXR5ID0gbmV3IE9yaWdpbkFjY2Vzc0lkZW50aXR5KHNjb3BlLCBgJHtDT05GSUcuU1RBQ0tfUFJFRklYfS1jbG91ZC1mcm9udC1vcmlnaW4tYWNjZXNzLWlkZW50aXR5YCk7XHJcciAgYnVja2V0LmdyYW50UmVhZChjbG91ZGZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHkpO1xyXHIgIGJ1Y2tldC5hZGRUb1Jlc291cmNlUG9saWN5KG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xyICAgIGFjdGlvbnM6IFsnczM6R2V0T2JqZWN0J10sXHIgICAgcmVzb3VyY2VzOiBbYnVja2V0LmFybkZvck9iamVjdHMoJyonKV0sXHIgICAgcHJpbmNpcGFsczogW25ldyBDYW5vbmljYWxVc2VyUHJpbmNpcGFsKGNsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eS5jbG91ZEZyb250T3JpZ2luQWNjZXNzSWRlbnRpdHlTM0Nhbm9uaWNhbFVzZXJJZCldLFxyICB9KSk7XHJcciAgcmV0dXJuIGNsb3VkZnJvbnRPcmlnaW5BY2Nlc3NJZGVudGl0eVxyfVxyIl19
